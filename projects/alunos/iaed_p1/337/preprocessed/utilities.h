/*File generated by PreProcessor.py*/

#ifndef UTILITIES_H
#define UTILITIES_H

#include <string.h>
#include "structs.h"


void merge_sort(int *, int, int, short int crit(int, int));
void merge(int *, int, int, int, short int crit(int, int));
short int prod_in(int p_id, const order *ord)
{
  int i;
  for (i = 0; i < ord->num; i++)
  {
    if (ord->ids[i] == p_id)
    {
      return 1;
    }
    else
    {
      
    }

  }

  return 0;
}

void merge_sort(int v[], int l, int r, short int crit(int, int))
{
  int m = (l + r) / 2;
  if (((r - l) + 1) < 2)
  {
    return;
  }
  else
  {
    
  }

  merge_sort(v, l, m, crit);
  merge_sort(v, m + 1, r, crit);
  merge(v, l, m, r, crit);
}

void merge(int v[], int l, int m, int r, short int crit(int, int))
{
  int i = l;
  int j = m + 1;
  int k = 0;
  int *aux = malloc(((r - l) + 1) * (sizeof(int)));
  for (; (i <= m) && (j <= r); k++)
  {
    if (crit(v[i], v[j]))
    {
      aux[k] = v[i++];
    }
    else
    {
      aux[k] = v[j++];
    }

  }

  while (i <= m)
    aux[k++] = v[i++];

  while (j <= r)
    aux[k++] = v[j++];

  for (i = 0; i < ((r - l) + 1); i++)
    v[l + i] = aux[i];

  free(aux);
}

short int price_ordered(int p_id1, int p_id2)
{
  return sys[p_id1].price <= sys[p_id2].price;
}

short int ab_ordered(int p1, int p2)
{
  return strcmp(sys[p1].desc, sys[p2].desc) <= 0;
}

#endif