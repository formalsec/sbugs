import os

from pycparser import  parse_file
from pycparser.c_ast import *

class C_FileGenerator:
	def __init__(self, inputfile, outputfile,
				 fakelib=None, save_ast=False):


		self.inputfile = inputfile
		self.outputfile = outputfile
		
		
		self.save_ast = save_ast
		self.fakelib = f'{os.path.abspath(os.path.dirname(__file__))}/Fake_libc'


		tmpname = self.outputfile.split('/')[-1]
		self.tmpfile = f'tmp_{tmpname}'


		if fakelib is not None:
			self.fakelib = fakelib

		#Write input ast for debug
		if self.save_ast:
			ast = parse_file(self.inputfile, use_cpp=True,
			cpp_path='gcc',
			cpp_args=['-E', f'-I{self.fakelib}/fake_libc_include'])
			file = open('ast.txt', "w")
			file.write(str(ast))


	
	def _remove_files(self, *files):
		for f in files:
			if os.path.exists(f):
				os.remove(f)


	#Store 'includes' of inputfile
	#Create tmp file annotated to separate code from includes
	def _preprocess_file(self, inputfile, tmpfile, add_stdlib=False):
		stdlib = False
		includes = []
		file = []
		with open(inputfile, 'r') as inp:
			for line in inp:
				if line.startswith('#include'):
					includes.append(line)
					
					if 'stdlib' in line:
						stdlib = True #Check if already contains <stdlib>
				else:
					file.append(line)


		#Mark end of includes
		tmpfile = open(tmpfile, "w")
		tmpfile.writelines(includes)
		tmpfile.write('void __start();\n')
		tmpfile.writelines(file)
		tmpfile.flush()

		#Add <stdlib> for malloc warning
		if not stdlib and add_stdlib:
			includes.append(f'#include <stdlib.h>\n')

		return includes


	#Removes typedefs from fake_libc
	#Prepends the correct includes
	#Add our macros for symbolic tests
	def	_postprocess_file(self, inputfile, includes, generator=None, stubs=[]):
		if generator is None:
			generator= os.path.basename(__file__)

		start = False
		file = []
		with open(inputfile, 'r') as inp:
			for line in inp:
				if start:
					file.append(line)

				if line.startswith('void __start();'):
					start = True
					file.append(f'/*File generated by {generator}*/\n\n')
					file += includes
					file.append('\n')
					file += stubs
					file.append('\n')


		return file



	def gen(self):
		pass